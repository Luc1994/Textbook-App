
package edu.yale.cpsc112_assignment2;

import java.util.LinkedHashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.regex.*;
import java.util.*;

public class CPSC112_Assignment2 {

	public static void main(String[] args) {
		
		// WE DID NOT NEED THE WHOLE DELIMS THING BECAUSE WE CAN JUST USE STRING.SPLIT, WHICH 
		// SPLITS AT EACH SPACE
		
		//Create the token set:
		Set<String> tokens = parseSearchText("the hoop earring on the doofus");
	
		
		System.out.println(tokens);
		
	}
	
	public static String contradictNull(String userinput) {
		
		if (userinput == null) {
			throw new IllegalArgumentException("You gotta put stuff in the search bar, dummy.");
		}
		String realinput = userinput;
		return realinput;  //Not sure we actually want to return this?
	}
	
	public static Set<String> parseSearchText(String realinput) {
		Set<String> result = new LinkedHashSet<>();
		
		
		boolean returnTokens = true;
	    String currentDelims = whiteSpace;
	    StringTokenizer parser = new StringTokenizer(
	     realinput, currentDelims, returnTokens
	    );

	    String token = null;
	    while (parser.hasMoreTokens()) {
	      token = parser.nextToken(currentDelims);
	    
	      }
	  
	    return result;
	  }

	//convert commonwords to list and call removeall on list of words
	public static final Set<String> CommonWords;
	static  { CommonWords = new LinkedHashSet<String>();
	CommonWords.add("a");
	CommonWords.add("an");
	CommonWords.add("the");
	CommonWords.add("and");
	CommonWords.add("but");
	CommonWords.add("or");
	CommonWords.add("to");
	CommonWords.add("on");
	CommonWords.add("from");
	CommonWords.add("at");
	CommonWords.add("of");
	CommonWords.add("is");
	CommonWords.add("for");
	
	}
	
	public boolean isCommonWord(String aSearchTokenCandidate){
		return CommonWords.contains(aSearchTokenCandidate);
	}
	
	public boolean textHasContent(String textContent) {
		return (textContent != null) && (!textContent.trim().equals(""));
	}
	
	//This method adds non-common words as search tokens.
	public void addNonTrivialWordToResult(String aToken, Set<String> aResult){
	    if (textHasContent(aToken) && !isCommonWord(aToken.trim())) {
	      aResult.add(aToken.trim());
	    }
	  }
	
	public static final String whiteSpace = " \t\r\n\"";
}
